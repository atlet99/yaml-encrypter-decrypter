name: Update Release Version

on:
  push:
    branches:
      - main

# Set minimal permissions for the entire workflow
permissions:
  contents: read

jobs:
  update-release-version:
    name: Update .release-version with tag and build ID
    # Run only if commit was made by a user other than github-actions[bot]
    # or if commit does not contain [skip ci]
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') && github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.CONTENT_RELEASE }}

      - name: Determine next tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "Latest tag: $latest_tag"
          
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          patch=$((patch + 1))
          if [ "$patch" -ge 10 ]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [ "$minor" -ge 10 ]; then
            minor=0
            major=$((major + 1))
          fi
          new_tag="v$major.$minor.$patch"
          echo "New tag: $new_tag"
          echo "$new_tag" > .release-version
          echo "$new_tag (build ${{ github.run_id }})" >> .release-version
      
      - name: Commit and push .release-version
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes for commit
          if [[ -z $(git status --porcelain .release-version) ]]; then
            echo "No changes to .release-version, skipping commit"
            exit 0
          fi
          
          git add .release-version
          git commit -m "Update .release-version with version and build ID"
          
          # Configure URL for using token
          REPO_URL="https://x-access-token:${{ secrets.CONTENT_RELEASE }}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "${REPO_URL}"
          git push origin HEAD:main
      
      - name: Create and push new tag
        run: |
          new_tag=$(head -n 1 .release-version)
          
          # Check if tag already exists
          if git rev-parse "$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists, skipping tag creation"
            exit 0
          fi
          
          git tag $new_tag
          git push origin $new_tag
