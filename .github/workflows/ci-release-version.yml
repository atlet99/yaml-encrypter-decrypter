name: Update Release Version

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.release-version'  # Ignore changes to .release-version to prevent circular runs

# Set minimal permissions for the entire workflow
permissions:
  contents: read

jobs:
  update-release-version:
    name: Update .release-version with tag and build ID
    # Skip execution if commit was made by github-actions[bot]
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Check if update is needed
        id: check_update
        run: |
          # Check if .release-version file was recently updated
          if [[ -f .release-version ]]; then
            LAST_MODIFIED=$(git log -1 --format=%ct -- .release-version)
            CURRENT_TIME=$(date +%s)
            DIFF_SECONDS=$((CURRENT_TIME - LAST_MODIFIED))
            # If file was updated less than 1 hour ago (3600 seconds), skip update
            if [[ $DIFF_SECONDS -lt 3600 ]]; then
              echo "File .release-version was updated recently, skipping"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Determine next tag
        if: steps.check_update.outputs.skip != 'true'
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          patch=$((patch + 1))
          if [ "$patch" -ge 10 ]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [ "$minor" -ge 10 ]; then
            minor=0
            major=$((major + 1))
          fi
          new_tag="v$major.$minor.$patch"
          echo "New tag: $new_tag"
          echo "$new_tag" > .release-version
          echo "$new_tag (build ${{ github.run_id }})" >> .release-version
      
      - name: Commit and push .release-version
        if: steps.check_update.outputs.skip != 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add .release-version
          git commit -m "Update .release-version with version and build ID [skip ci]"
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.CONTENT_RELEASE }}

      - name: Create and push new tag
        if: steps.check_update.outputs.skip != 'true'
        run: |
          new_tag=$(head -n 1 .release-version)
          git tag $new_tag
          git push origin $new_tag
        env:
          GITHUB_TOKEN: ${{ secrets.CONTENT_RELEASE }}
